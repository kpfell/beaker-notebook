/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
def coreDir = file("../../../") // TODO, this can come from a property

ext {
  evalPluginDir = new File(coreDir, "config/plugins/eval")
}

task build
task buildembed
task builddebug
task clean
task check
task updatePackages
task zipPackages
task copyVendorStuff

task run (type: Exec) {
  workingDir coreDir
  commandLine './beaker.command'
}
task runOnly (type: Exec) {
  workingDir coreDir
  commandLine './beaker.command'
}
task debug (type: Exec) {
  workingDir coreDir
  commandLine './beaker.command'
}
task runembed (type: Exec) {
  workingDir coreDir
  commandLine './beaker.command'
}

task installPlugins {
  def pluginProjects = project.subprojects.grep { it.project.path.startsWith(':plugin:') }
  pluginProjects.each {
    installPlugins.dependsOn(it.project.path + ":installApp")
  }
}

task cleanPlugins (type: Exec) {
  commandLine 'rm', '-rf', evalPluginDir.absolutePath
}

def gitDescribe() {
  def name = "git describe --all --long".execute().text.trim()
  if (name.startsWith('heads/')) {
    name = name.substring(6)
  }
  return name
}

def gitGetHash() {
  def name = "git log --pretty=format:%h -n 1".execute().text.trim()
  return name
}

task writeVersion << {
  new File(coreDir, 'config/version').write(gitDescribe());
  new File(coreDir, 'config/hash').write(gitGetHash());
  new File(coreDir, 'config/build_time').write(new Date().format("yyyy-MM-dd HH:mm z"));
}

clean.dependsOn(":core:clean")
clean.dependsOn(cleanPlugins)
build.dependsOn(":core:build")
build.dependsOn(":core:installApp")
build.dependsOn(":core:copyVendorStuff")
build.dependsOn(writeVersion)
build.dependsOn(installPlugins)
buildembed.dependsOn(":core:buildembed")
buildembed.dependsOn(":core:installApp")
buildembed.dependsOn(":core:copyVendorStuff")
buildembed.dependsOn(writeVersion)
buildembed.dependsOn(installPlugins)
builddebug.dependsOn(":core:builddebug")
builddebug.dependsOn(":core:installApp")
builddebug.dependsOn(":core:copyVendorStuff")
builddebug.dependsOn(writeVersion)
builddebug.dependsOn(installPlugins)
run.dependsOn(build)
runembed.dependsOn(buildembed)
debug.dependsOn(builddebug)
check.dependsOn(":core:build")
check.dependsOn(":core:installApp")
check.dependsOn(writeVersion)
check.dependsOn(installPlugins)
check.dependsOn(":test:check")
updatePackages.dependsOn(":core:updatePackages")

